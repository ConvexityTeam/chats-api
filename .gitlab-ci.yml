stages:
  - build
  - deploy-staging
  - deploy-production

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache git
  script:
    - echo "$CONTAINER_REGISTRY_PASSWORD" | docker login --username "$CONTAINER_REGISTRY_USERNAME" --password-stdin "$CONTAINER_REGISTRY_URL"
    # - docker login --username $CONTAINER_REGISTRY_USERNAME --password $CONTAINER_REGISTRY_PASSWORD $CONTAINER_REGISTRY_URL
    - docker build -t $CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG .
    - docker tag $CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG
    - docker push $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG

staging:
  stage: deploy-staging
  image: docker:latest
  before_script:
    - apk add --update --no-cache aws-cli
  script:
    - aws configure set aws_access_key_id $ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_REGION

    - echo "$CONTAINER_REGISTRY_PASSWORD" | docker login --username "$CONTAINER_REGISTRY_USERNAME" --password "$CONTAINER_REGISTRY_URL"
    # - docker login --username $CONTAINER_REGISTRY_USERNAME --password $CONTAINER_REGISTRY_PASSWORD $CONTAINER_REGISTRY_URL
    - docker pull "$CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG"

    # Deploy the Docker image to the EC2 instance
    - docker save "$CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG" | ssh -i /path/to/your/ec2/key.pem $USER@$APP_URL_STAGING "docker load"

  only:
    - staging
