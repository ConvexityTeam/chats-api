stages:
  - build
  - deploy-staging
  - deploy-production

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache git
  script:
    - echo "$CONTAINER_REGISTRY_PASSWORD" | docker login --username "$CONTAINER_REGISTRY_USERNAME" --password-stdin "$CONTAINER_REGISTRY_URL"
    - docker build -t $CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG .
    - docker tag $CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG
    - docker push $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG

staging:
  stage: deploy-staging
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --update --no-cache aws-cli
  script:
    - aws configure set aws_access_key_id $ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_REGION
    - echo "$CONTAINER_REGISTRY_PASSWORD" | docker login --username "$CONTAINER_REGISTRY_USERNAME" --password-stdin "$CONTAINER_REGISTRY_URL"
    - docker pull "$CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG"

    # Echo the content of deploy.sh to ensure it is being read correctly
    - echo "Content of deploy.sh:"
    - cat ./deploy.sh

    # Convert deploy.sh to base64 and echo the base64 content
    - >
      SCRIPT=$(cat ./deploy.sh | base64)
      echo "Base64-encoded content of deploy.sh:"
      echo "$SCRIPT"

    # Send the Docker Compose commands via AWS SSM Run Command
    - aws ssm send-command \
        --instance-ids "i-06f240a3b2e573928" \
        --document-name "AWS-RunShellScript" \
        --query "Command.CommandId" \
        --output text \
        --parameters commands="$SCRIPT"

  only:
    - staging
