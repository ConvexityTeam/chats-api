image: docker:latest

services:
  - docker:dind

stages:
  - build
  - deploy-staging
  - deploy-production

variables:
  DOCKER_DRIVER: overlay2

before_script:
  - apk add --update --no-cache aws-cli openssh-client docker-compose

build:
  stage: build
  before_script:
    - apk add --no-cache git
  script:
    - echo "$CONTAINER_REGISTRY_PASSWORD" | docker login --username "$CONTAINER_REGISTRY_USERNAME" --password-stdin "$CONTAINER_REGISTRY_URL"
    - docker build -f Dockerfile -t $CONTAINER_IMAGE_NAME1:$CONTAINER_IMAGE_TAG1 .
    - docker build -f Dockerfile.Consumer -t $CONTAINER_IMAGE_NAME2:$CONTAINER_IMAGE_TAG2 .
    - docker tag $CONTAINER_IMAGE_NAME1:$CONTAINER_IMAGE_TAG1 $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME1:$CONTAINER_IMAGE_TAG1
    - docker tag $CONTAINER_IMAGE_NAME2:$CONTAINER_IMAGE_TAG2 $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME2:$CONTAINER_IMAGE_TAG2
    - docker push $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME1:$CONTAINER_IMAGE_TAG1
    - docker push $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME2:$CONTAINER_IMAGE_TAG2
  only:
    - staging

deploy-staging:
  stage: deploy-staging
  script:
    - aws configure set aws_access_key_id $ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    # - echo "$CONTAINER_REGISTRY_PASSWORD" | docker login --username "$CONTAINER_REGISTRY_USERNAME" --password-stdin "$CONTAINER_REGISTRY_URL"
    
    - >
      DOCUMENT_NAME="AppDockerComposeDeploy_$(date +'%Y%m%d%H%M%S')"
      COMMAND_ID=$(aws ssm create-document \
        --name "$DOCUMENT_NAME" \
        --document-type "Command" \
        --document-format "YAML" \
        --content "\
        {
          \"schemaVersion\":\"2.2\",
          \"description\":\"Docker Compose Deploy\",
          \"mainSteps\":[
            {
              \"action\":\"aws:runShellScript\",
              \"name\":\"runShellScript\",
              \"inputs\":{
                \"runCommand\":[
                  \"cd /data/app\",
                  \"sudo rm docker-compose.prod.yml\",
                  \"aws s3 cp s3://chats-docker/docker-compose.prod.yml /data/app/docker-compose.prod.yml\",
                  \"docker pull $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME1:$CONTAINER_IMAGE_TAG1\",
                  \"docker pull $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME2:$CONTAINER_IMAGE_TAG2\",
                  \"docker-compose down\",
                  \"docker run -d -p 8080:8080 --name backend $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME1:$CONTAINER_IMAGE_TAG1\",
                  # \"docker image prune -af\"
                ]
              }
            }
          ]
        }")

    - >
      EXECUTION_ID=$(aws ssm send-command \
        --document-name "$DOCUMENT_NAME" \
        --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"i-06f240a3b2e573928\"]}]" \
        --output text \
        --query "Command.CommandId")

    # Implement a retry mechanism with exponential backoff
    - MAX_RETRIES=10
    - RETRY_INTERVAL=10  # Initial retry interval in seconds

    - >
      retry() {
        if [ "$MAX_RETRIES" -eq 0 ]; then
          echo "Docker Compose deployment to staging failed after $MAX_RETRIES attempts."
          exit 1
        fi

        EXECUTION_STATUS=$(aws ssm get-command-invocation \
          --instance-id "i-06f240a3b2e573928" \
          --command-id "$EXECUTION_ID" \
          --query "Status" \
          --output text)
        
        echo "Current execution status: $EXECUTION_STATUS"

        if [ "$EXECUTION_STATUS" = "Success" ]; then
          echo "Docker Compose deployment to staging successful."
        elif [ "$EXECUTION_STATUS" = "InProgress" ]; then
          echo "Deployment is still in progress. Retrying in $RETRY_INTERVAL seconds..."
          sleep "$RETRY_INTERVAL"
          RETRY_INTERVAL=$(expr "$RETRY_INTERVAL" \* 2)  # Exponential backoff
          MAX_RETRIES=$(expr "$MAX_RETRIES" - 1)
          retry
        elif [ "$EXECUTION_STATUS" = "Failed" ]; then
          ERROR_INFO=$(aws ssm get-command-invocation \
            --instance-id "i-06f240a3b2e573928" \
            --command-id "$EXECUTION_ID" \
            --output text)
          echo "Error details: $ERROR_INFO"
          echo "Deployment failed with status: $EXECUTION_STATUS"
          exit 1
        fi
      }
      # Call the retry function
    - echo "Calling the retry function..."
    - echo "Document Name - $DOCUMENT_NAME"
    - echo "Execution ID -  $EXECUTION_ID"
    - retry

  only:
    - staging

