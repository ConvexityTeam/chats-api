stages:
  - build
  - deploy-staging
  - deploy-production

variables:
  DOCKER_DRIVER: overlay2

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --no-cache git
  script:
    - echo "$CONTAINER_REGISTRY_PASSWORD" | docker login --username "$CONTAINER_REGISTRY_USERNAME" --password-stdin "$CONTAINER_REGISTRY_URL"
    - docker build -t $CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG .
    - docker tag $CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG
    - docker push $CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG
  only:
    - staging

deploy-staging:
  stage: deploy-staging
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - apk add --update --no-cache aws-cli
  script:
    - aws configure set aws_access_key_id $ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - docker pull "$CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG"
    - >
      DOCUMENT_NAME="AppDockerComposeDeploy_$(date +'%Y%m%d%H%M%S')"
      COMMAND_ID=$(aws ssm create-document \
        --name "$DOCUMENT_NAME" \
        --document-type "Command" \
        --document-format "YAML" \
        --content "{\"schemaVersion\":\"2.2\",\"description\":\"Docker Compose Deploy\",\"mainSteps\":[{\"action\":\"aws:runShellScript\",\"name\":\"runShellScript\",\"inputs\":{\"runCommand\":[\"docker-compose -f docker-compose.prod.yml up -d\"]}}]}")
    - >
      EXECUTION_ID=$(aws ssm create-association \
        --name "DockerComposeDeploy" \
        --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"i-06f240a3b2e573928\"]}]" \
        --association-name "DockerComposeDeploy" \
        --document-version "\$LATEST" \
        --output text \
        --query "AssociationDescription.AssociationId")

    # Implement a retry mechanism with exponential backoff
    - MAX_RETRIES=10
    - RETRY_INTERVAL=10  # Initial retry interval in seconds
    - >
      i=1
      for i in $(seq "$MAX_RETRIES"); do
        EXECUTION_STATUS=$(aws ssm describe-command-invocation \
          --instance-id "i-06f240a3b2e573928" \
          --command-id "$EXECUTION_ID" \
          --query "Status" \
          --output text)

        if [ "$EXECUTION_STATUS" = "Success" ]; then
          echo "Docker Compose deployment to staging successful."
          break
        elif [ "$i" -eq "$MAX_RETRIES" ]; then
          echo "Docker Compose deployment to staging failed after $MAX_RETRIES attempts."
          exit 1
        else
          echo "Retrying in $RETRY_INTERVAL seconds..."
          sleep "$RETRY_INTERVAL"
          RETRY_INTERVAL=$(expr "$RETRY_INTERVAL" \* 2)  # Exponential backoff
          i=$(expr "$i" + 1)
        fi
      done
  only:
    - staging

deploy-production:
  stage: deploy-production
  script:
    - aws configure set aws_access_key_id $ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - docker pull "$CONTAINER_REGISTRY_URL/$CONTAINER_IMAGE_NAME:$CONTAINER_IMAGE_TAG"
    - >
      COMMAND_ID=$(aws ssm create-document \
        --name "DockerComposeDeploy" \
        --document-type "Command" \
        --document-format "yaml" \
        --content "{\"schemaVersion\":\"2.2\",\"description\":\"Docker Compose Deploy\",\"mainSteps\":[{\"action\":\"aws:runShellScript\",\"name\":\"runShellScript\",\"inputs\":{\"runCommand\":[\"docker-compose -f docker-compose.prod.yml up -d\"]}}]}")
    - >
      EXECUTION_ID=$(aws ssm create-association \
        --name "DockerComposeDeploy" \
        --targets "[{\"Key\":\"InstanceIds\",\"Values\":[\"i-xxxxxxxxxxxxxxxxx\"]}]" \
        --association-name "DockerComposeDeploy" \
        --document-version "\$LATEST" \
        --output text \
        --query "AssociationDescription.AssociationId")
    - >
      EXECUTION_STATUS=$(aws ssm wait command-executed \
        --instance-id "i-xxxxxxxxxxxxxxxxx" \
        --command-id "$EXECUTION_ID" \
        --query "Status")
    - >
      if [ "$EXECUTION_STATUS" == "Success" ]; then
        echo "Docker Compose deployment to production successful."
      else
        echo "Docker Compose deployment to production failed."
        exit 1
      fi
  only:
    - production

